TCP Socket 文件反转程序 README

1. 实验概述
	本实验包含两个Python脚本：reversetcpserver.py和reversetcpclient.py，共同实现了一个基于 TCP 协议的 socket 编程实验，实现了客户端与服务器之间的文件反转功能。客户端将 ASCII 文本文件分割成不定长的数据块，发送给服务器进行反转处理，服务器处理后返回结果，最终客户端将所有反转后的块合并成完整的反转文件。


2. 运行环境
- 软件要求：Python 3.6 或更高版本，支持 TCP/IP 协议的网络环境。
- 硬件要求：
	客户端：任意支持 Python 的主机系统（Host OS）。
	服务器：任意支持 Python 的 Guest OS 系统。
	网络连接：确保客户端与服务器可互相访问。
- 系统支持：支持Python的任何操作系统（Windows、Linux、macOS等）。


3. 配置选项与参数说明
3.1 服务器端参数
	python reversetcpserver.py <port>
	port：服务器监听端口（范围：1-65535）

3.2 客户端参数
	python reversetcpclient.py <serverIP> <serverPort> <Lmin> <Lmax> <inputFile> <outputFile>
	serverIP：服务器 IP 地址
	serverPort：服务器端口号
	Lmin：数据块最小长度（字节，≥1）
	Lmax：数据块最大长度（字节，≥Lmin）
	inputFile：输入文件路径（ASCII 编码）
	outputFile：输出文件路径


4. 使用说明
确保服务器系统已安装 Python 3
- 服务器端启动：
打开终端，进入服务器代码所在目录。
执行命令启动服务器：python reversetcpserver.py <port>，输入您想监听的端口号。
示例：python reversetcpserver.py  8888。
服务器将监听指定端口，等待客户端连接。

- 客户端启动：
准备一个 ASCII 编码的输入文件（如 inputfile.txt）。
打开终端，进入客户端代码所在目录。
执行命令连接服务器并处理文件：python reversetcpclient.py <serverIP> <serverPort> <Lmin> <Lmax> <inputFile> <outputFile>，输入您相设置的数据块长度范围及文件的输入输出路径。
示例：python reversetcpclient.py 127.1.1.0 8888 6 10 inputfile.txt outputfile.txt。
客户端将显示每块数据的反转结果，并在完成后保存最终反转文件outfile.txt。


5. 功能说明
5.1 核心功能
	文件分割：客户端按指定范围 [Lmin, Lmax] 将文件随机分割成多个数据块。
	报文交互：使用自定义协议完成初始化、同意、请求反转、应答反转四个阶段的通信。
	数据反转：服务器接收数据块后进行文本反转并返回。
	多客户端支持：服务器通过线程实现并发处理多个客户端请求。
	结果输出：客户端将反转后的块合并为完整文件并保存。

5.2 报文协议
- 报文类型
	类型值	      名称	                     方向
	   1	        Initialization	      客户端→服务器
	   2	           Agree	              服务器→客户端
	   3	      ReverseRequest	      客户端→服务器
	   4	      ReverseAnswer	      服务器→客户端

- 报文格式
Initialization 报文
  +--------+--------+
  | Type(2B)| N(4B)  |
  +--------+--------+
  - Type字段：2字节，固定值为1。
  - N字段：4字节，表示要处理的数据块数量。

Agree 报文
  +--------+
  | Type(2B)|
  +--------+
  - Type字段：2字节，固定值为2。

ReverseRequest 报文
  +--------+--------+----------------+------
  | Type(2B)| Length(4B)| Data(Length B) |
  +--------+--------+----------------+-----
  - Type字段：2字节，固定值为3。
  - Length字段：4字节，表示Data字段的长度。
  - Data字段：Length字节，包含要反转的文本数据。

ReverseAnswer 报文
  +--------+--------+------------------+---------------
  | Type(2B)| Length(4B)| ReverseData(Length B)|
  +--------+--------+------------------+---------------
  - Type字段：2字节，固定值为4。
  - Length字段：4字节，表示reverseData字段的长度。
  - reverseData字段：Length字节，包含反转后的文本数据。


6. 运行流程示例
- 服务器端输出示例：
服务器启动，监听端口 8888...
创建新线程处理 (192.168.1.100, 50001) 的请求
接受来自 (192.168.1.100, 50001) 的连接
从 (192.168.1.100, 50001) 收到Initialization报文，N=5
向 (192.168.1.100, 50001) 发送agree报文
从 (192.168.1.100, 50001) 接收第1块数据，长度=20字节
向 (192.168.1.100, 50001) 发送第1块反转后的数据，长度=20字节
...（中间块处理）
完成处理 (192.168.1.100, 50001) 的所有5块数据
关闭与 (192.168.1.100, 50001) 的连接

- 客户端输出示例：
发送初始化报文: N=5
收到服务器同意报文
第1块：yeknom elttil a
第2块：!dlrow olleh
...（中间块处理）
========================= 处理结果 ==============================
原文：a little monkey!hello world
反转后：dlrow olleh!yeknom elttil a
=============================================================
文件反转成功！
客户端连接已关闭


7. 注意事项
文件编码：输入文件必须为 ASCII 编码，否则会导致协议错误。
端口权限：服务器端口若小于 1024，需使用管理员 /root 权限启动。
网络配置：确保服务器防火墙允许客户端连接指定端口。
数据块长度：Lmin 必须大于 0，且 Lmax 不小于 Lmin。
并发处理：服务器通过线程处理多客户端请求，无需额外配置。
异常处理：程序包含完善的异常处理机制，可捕获协议错误、网络错误等异常。


8. 常见问题 FAQ
Q: 客户端连接服务器失败怎么办？
A: 检查IP、端口、防火墙设置，确保两端网络互通。
Q: 输入文件不是ASCII编码怎么办？
A: 请用文本编辑器将文件另存为ASCII编码，或用iconv等工具转换。
Q: 端口被占用怎么办？
A: 更换端口号，或释放被占用的端口。
Q: 服务器端口小于1024无法启动？
A: 以管理员/root权限运行服务器，或使用大于1024的端口。
Q: 反转结果不正确？
A: 检查输入文件内容和参数设置，确保无误。